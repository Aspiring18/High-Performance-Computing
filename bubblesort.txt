%%writefile bubblesort.cpp
#include <iostream>
#include <vector>
#include <omp.h>

using namespace std;

void bubble_sort_serial(vector<int>& arr) {
    int n = arr.size();
    bool swapped;
    for (int i = 0; i < n-1; i++) {
        swapped = false;
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                swap(arr[j], arr[j+1]);
                swapped = true;
            }
        }
        if (!swapped) {
            break;
        }
    }
}

void bubble_sort_odd_even(vector<int>& arr) {
    bool isSorted = false;
    while (!isSorted) {
        isSorted = true;
        #pragma omp parallel for
        for (int i = 0; i < arr.size() - 1; i += 2) {
            if (arr[i] > arr[i + 1]) {
                swap(arr[i], arr[i + 1]);
                isSorted = false;
            }
        }
        #pragma omp parallel for
        for (int i = 1; i < arr.size() - 1; i += 2) {
            if (arr[i] > arr[i + 1]) {
                swap(arr[i], arr[i + 1]);
                isSorted = false;
            }
        }
    }
}

int main() {
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;

    vector<int> arr(n), arr_copy(n);
    cout << "Enter the elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
        arr_copy[i] = arr[i];
    }

    double start, end;

    // Measure performance of serial bubble sort
    start = omp_get_wtime();
    bubble_sort_serial(arr);
    end = omp_get_wtime();
    cout << "Sorted array using serial bubble sort: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
    cout << "Serial bubble sort time: " << end - start << " seconds" << endl;

    // Measure performance of parallel bubble sort using odd-even transposition
    start = omp_get_wtime();
    bubble_sort_odd_even(arr_copy);
    end = omp_get_wtime();
    cout << "Sorted array using parallel bubble sort: ";
    for (int i = 0; i < n; i++) {
        cout << arr_copy[i] << " ";
    }
    cout << endl;
    cout << "Parallel bubble sort using odd-even transposition time: " << end - start << " seconds" << endl;

    return 0;
}
//g++ -fopenmp bubblesort.cpp -o bubblesort
//./bubblesort