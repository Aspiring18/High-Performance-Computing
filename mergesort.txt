#include <iostream>
#include <omp.h>

using namespace std;

void merge(int arr[], int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;

    int L[n1], R[n2];

    for (int i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    int i = 0;
    int j = 0;
    int k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSortSerial(int arr[], int l, int r) {
    if (l >= r) {
        return;
    }
    int m = l + (r - l) / 2;

    mergeSortSerial(arr, l, m);
    mergeSortSerial(arr, m + 1, r);

    merge(arr, l, m, r);
}

void mergeSortParallel(int arr[], int l, int r) {
    if (l >= r) {
        return;
    }
    int m = l + (r - l) / 2;

    #pragma omp parallel sections
    {
        #pragma omp section
        mergeSortParallel(arr, l, m);
        #pragma omp section
        mergeSortParallel(arr, m + 1, r);
    }
    merge(arr, l, m, r);
}

int main() {
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;

    int arr_serial[n], arr_parallel[n];
    cout << "Enter the elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr_serial[i];
        arr_parallel[i] = arr_serial[i];
    }

    double start, end;

    // Measure performance of serial merge sort
    start = omp_get_wtime();
    mergeSortSerial(arr_serial, 0, n - 1);
    end = omp_get_wtime();
    cout << "Sorted array using serial merge sort: ";
    for (int i = 0; i < n; i++) {
        cout << arr_serial[i] << " ";
    }
    cout << endl;
    cout << "Serial merge sort time: " << end - start << " seconds" << endl;

    // Measure performance of parallel merge sort
    start = omp_get_wtime();
    mergeSortParallel(arr_parallel, 0, n - 1);
    end = omp_get_wtime();
    cout << "Sorted array using parallel merge sort: ";
    for (int i = 0; i < n; i++) {
        cout << arr_parallel[i] << " ";
    }
    cout << endl;
    cout << "Parallel merge sort time: " << end - start << " seconds" << endl;

    return 0;
}

//g++ -fopenmp filename.cpp -o filename
//./filename
//g++ -fopenmp min.cpp -o min
//./min

